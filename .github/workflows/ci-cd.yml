name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0  

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:    
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Creat S3 Bucket
        run:
          if aws s3api head-bucket --bucket "egbedo-bucket" >/dev/null 2>&1; then
          echo "Bucket already exists"
            else
            echo "Bucket does not exist , creating bucket"
          aws s3api create-bucket --bucket "egbedo-bucket" --region us-east-1
          fi

      - name: Create DynamoDB Table
        run:
          if aws dynamodb describe-table --table-name "egbedo-table" >/dev/null 2>&1; then
          echo "Table already exists"
            else
          echo "Table does not exist, creating table"
          aws dynamodb create-table --table-name "egbedo-table" --attribute-definitions AttributeName=MEID,AttributeType=S --key-schema AttributeName=ID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply --auto-approve
        working-directory: ./terraform

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.22.0/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          chmod +x ./kubectl

      - name: Configure kubectl
        run: 
          aws eks --region us-east-1 update-kubeconfig --name sock-shop
       
      - name: Deploy Microservices
        run: 
          kubectl apply -f kubernetes/deploy.yml
        
      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      - name: Add jetstack Helm repository
        run: helm repo add jetstack https://charts.jetstack.io
             helm repo update

      - name: Install cert-manager
        run:
          if helm list -n cert-manager | grep -q cert-manager; then
            echo "cert-manager already installed"
          else
            helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.5.3
          fi

      - name: Install Prometheus Helm repository
        run: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
             helm repo update

      - name: Install Prometheus
        run:
          if helm list -n --namespace sock-shop | grep -q prometheus; then
            echo "Prometheus already installed"
            helm upgrade prometheus prometheus-community/kube-prometheus-stack --namespace sock-shop
          else
            helm install prometheus prometheus-community/kube-prometheus-stack --namespace sock-shop 
          fi

      - name: Install or upgrade Nginx Ingress Controller
        run:
          if helm list -n sock-shop | grep -q nginx-ingress; then
            echo "Nginx Ingress Controller already installed"
            helm upgrade nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx
          else
            helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
          fi

      - name: Deploy Ingress
        run: 
          kubectl config set-context --current --namespace=sock-shop
          kubectl apply -f kubernetes/ingress.yml

      - name: Validate Deployment
        run: 
          kubectl get pods,svc -n sock-shop
          kubectl get certificates -n sock-shop
        
 